{"version":3,"sources":["TodoInput.js","TodoListItem.js","TodoList.js","index.js"],"names":["TodoInput","props","state","value","onKeyPress","bind","onChange","event","nextState","cloneDeep","this","target","setState","key","which","onEnter","initialValue","className","type","placeholder","React","Component","TodoListItem","onCheckboxChange","onRemoveClick","onToggle","todo","id","onRemove","isComplete","checked","htmlFor","text","onClick","TodoList","todos","map","onTodoListItemToggle","onTodoListItemRemove","App","reactDevName","onTodoInputEnter","nextId","todoInputValue","push","find","filter","JSON","stringify","render","document","getElementById"],"mappings":"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","file":"static/js/main.428177eb.chunk.js","sourcesContent":["import React from \"react\";\nimport { cloneDeep } from \"lodash\";\n\nexport default class TodoInput extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      value: \"\"\n    };\n\n    this.onKeyPress = this.onKeyPress.bind(this);\n    this.onChange = this.onChange.bind(this);\n  }\n\n  onChange(event) {\n    // Deep copy the state.\n    const nextState = cloneDeep(this.state);\n    \n    // TODO(#8) Set the nextState.value to be\n    // the event.target.value.\n    nextState.value = event.target.value\n    // Set the next state.\n    this.setState(nextState);\n  }\n\n  /**\n   * Determines if a user pressed enter and validates\n   * the input before calling the onEnter prop.\n   */\n  onKeyPress(event) {\n    // Do nothing if the enter key was not pressed.\n    if (event.key !== \"Enter\" || event.which !== 13) {\n      return;\n    }\n\n    // TODO(#9) Call this.props.onEnter with this.state.value.\n    this.props.onEnter(this.state.value);\n    \n    // TODO(#10) Deep copy the state.\n    const nextState = cloneDeep(this.state);\n\n    // TODO(#11) Update the state such that the user\n    // does not have to manually backspace.\n    nextState.value = \"\";\n\n\n    // TODO(#12) Set the next state.\n    this.setState(nextState)\n  }\n\n  componentDidMount() {\n    if (this.props.initialValue) {\n      const nextState = cloneDeep(this.state);\n      nextState.value = this.props.initialValue;\n      this.setState(nextState);\n    }\n  }\n\n  render() {\n    return (\n      <input\n        className=\"form-control\"\n        type=\"text\"\n        placeholder=\"What do you need to do?\"\n        value={this.state.value}\n        onChange={this.onChange}\n        onKeyPress={this.onKeyPress}\n      />\n    );\n  }\n}\n","import React from \"react\";\n\nexport default class TodoListItem extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onCheckboxChange = this.onCheckboxChange.bind(this);\n    this.onRemoveClick = this.onRemoveClick.bind(this);\n  }\n\n  onCheckboxChange(event) {\n    // TODO(#18) Call this.props.onToggle with the todo ID.\n    // hint: How can you access the todo ID?\n\n    this.props.onToggle(this.props.todo.id)\n  }\n\n  onRemoveClick(event) {\n    // TODO(#25) Call this.props.onRemove with the todo ID.\n\n    this.props.onRemove(this.props.todo.id)\n  }\n\n  render() {\n    const id = `todo-id-${this.props.todo.id}`;\n\n    let className = \"list-group-item d-flex justify-content-between align-items-center\";\n    if (this.props.todo.isComplete) {\n      className += \" list-group-item-success\";\n    }\n\n    return (\n      <li className={className}>\n        <div className=\"form-check form-check-inline\">\n          <input\n            id={id}\n            className=\"form-check-input\"\n            type=\"checkbox\"\n            checked={this.props.todo.isComplete/* TODO(#19) Use the correct todo property. */}\n            onChange={this.onCheckboxChange/* TODO(#20) Use the correct event handler. */}\n          />\n          <label htmlFor={id} className=\"form-check-label\">\n            {this.props.todo.text}\n          </label>\n        </div>\n        <button\n          className=\"btn btn-danger btn-sm\"\n          onClick={this.onRemoveClick/* TODO(#26) Use the correct event handler */}\n        >\n          remove\n        </button>\n      </li>\n    );\n  }\n}\n","import React from \"react\";\nimport TodoListItem from \"./TodoListItem\";\n\nexport default class TodoList extends React.Component {\n  render() {\n    return (\n      <ul className=\"list-group list-group-flush\">\n        {this.props.todos.map(todo => (\n          <TodoListItem\n            key={todo.id}\n            todo={todo}\n            onToggle={this.props.onTodoListItemToggle}\n            onRemove={this.props.onTodoListItemRemove}\n          />\n        ))}\n      </ul>\n    );\n  }\n}\n","import React from \"react\";\nimport { render } from \"react-dom\";\nimport TodoInput from \"./TodoInput\";\nimport TodoList from \"./TodoList\";\nimport { cloneDeep } from \"lodash\";\n\n// TODO(#)s correspond to Code Next React Bootcamp's slides.\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // TODO(#3) Update the state such that reactDevName\n    // points to a string of your name.\n    this.state = {\n      reactDevName: \"Deyby\",\n      todos: []\n    };\n\n    // In React class components, we bind each event handler to\n    // the instance. That way, when the event handler is called,\n    // the 'this' variable is pointing to this instance. If we\n    // skipped this step, then the 'this' variable would be\n    // undefined.\n    this.onTodoInputEnter = this.onTodoInputEnter.bind(this);\n    this.onTodoListItemToggle = this.onTodoListItemToggle.bind(this);\n    this.onTodoListItemRemove = this.onTodoListItemRemove.bind(this);\n\n    // React does not need to know about the next ID.\n    // We leave it outside of the state so that React\n    // does not try to re-render the component when it changes.\n    this.nextId = 0;\n  }\n\n  onTodoInputEnter(todoInputValue) {\n    // Deep copy the state.\n    const nextState = cloneDeep(this.state);\n\n    // TODO(#5) Create a todo object, which has 3 properties:\n    // id (number), text (string), and isComplete (boolean).\n\n    const todo = {\n      id: this.nextId++,\n      text:todoInputValue,\n      isComplete: false \n      }\n    // hint: Use this.nextId and change it in some way. \n\n    // TODO(#6) Add the todo to the nextState.todos array.\n    nextState.todos.push(todo);\n\n    // Set the next state.\n    this.setState(nextState);\n  }\n\n  onTodoListItemToggle(id) {\n    // TODO(#13) Deep copy the state.\n    const nextState = cloneDeep(this.state);\n\n    // TODO(#14) Find the todo that matches the id.\n    // If there is no matched todo, do nothing.\n    // hint: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find\n    const todo = nextState.todos.find(todo => todo.id === id)\n    if(!todo){\n      return;\n    }\n    \n    // TODO(#15) Update the matched todo's isComplete property\n    // to be the opposite of what it is currently set.\n\n    todo.isComplete = !todo.isComplete;\n\n    // TODO(#16) Set the next state.\n\n    this.setState(nextState)\n  }\n\n  onTodoListItemRemove(id) {\n    // TODO(#21) Deep copy the state.\n    const nextState = cloneDeep(this.state);\n\n\n    // TODO(#22) Use Array.prototype.filter to create a new\n    // nextState.todos array that does *not* have a todo\n    // that matches given id.\n    // hint: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\n\n    nextState.todos = nextState.todos.filter(todo => todo.id !== id);\n\n    // TODO(#23) Set the next state.\n    this.setState(nextState)\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <h1>{this.state.reactDevName}'s Todos</h1>\n        <TodoInput onEnter={this.onTodoInputEnter/* TODO(#7) Use this.onTodoInputEnter */} />\n\n        <br />\n\n        <TodoList\n          todos={this.state.todos}\n          onTodoListItemToggle={this.onTodoListItemToggle/* TODO(#17) Use this.onTodoListItemToggle */}\n          onTodoListItemRemove={this.onTodoListItemRemove/* TODO(#24) Use the correct event handler. */}\n        />\n\n        <br />\n\n        <pre className=\"alert alert-warning\">\n          this.state = {JSON.stringify(this.state, null, 2)}\n        </pre>\n      </div>\n    );\n  }\n}\n\nrender(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}